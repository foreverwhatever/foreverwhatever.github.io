{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_": 0
   },
   "source": [
    "# Front Matter `nbconvert` preprocessor\n",
    "\n",
    "Append *metadata* and *resources* as front matter to a notebook; insert a markdown cell at the beginning of notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_": 1,
    "lang": "",
    "sep": ""
   },
   "outputs": [],
   "source": [
    "o = __name__ == '__main__'\n",
    "if o:\n",
    "    %reload_ext literacy.template"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_": 2
   },
   "source": [
    "Make sure all Mapping objects are pure python __dict__s\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_": 2,
    "lang": "",
    "sep": ""
   },
   "outputs": [],
   "source": [
    "def safe(object):\n",
    "    if hasattr(object, 'items'):\n",
    "        object = dict(object)\n",
    "        for key, value in object.items():\n",
    "            object.update({key: safe(value)})\n",
    "    return object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_": 3,
    "lang": "",
    "sep": ""
   },
   "outputs": [],
   "source": [
    "class FrontMatter(__import__('nbconvert').preprocessors.Preprocessor):\n",
    "    def preprocess(self, nb, resources={}):\n",
    "        source = __import__('yaml').safe_dump(\n",
    "            safe({**resources, **nb['metadata']}), default_flow_style=False)\n",
    "        nb['cells'].insert(\n",
    "            0, __import__('nbformat').v4.new_markdown_cell(\"\"\"---\\n{}\\n---\\n\"\"\".format(source))\n",
    "        )\n",
    "        return nb, resources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_": 4,
    "lang": "",
    "sep": ""
   },
   "outputs": [],
   "source": [
    "exporter = __import__('nbconvert').get_exporter('markdown')(\n",
    "    config={'TemplateExporter': {'preprocessors': ['literacy.preprocessors.Dedent', FrontMatter]}})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "> The snippet below shows the composed code.\n",
    "\n",
    "<pre><code>{{o and exporter.from_filename('2017-06-24-Front-Matter-Preprocessor.ipynb')[0].lstrip()}}</code></pre>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_": 6
   },
   "source": [
    "__normalize__ all the values of a collection to a basic `dict` type for `yaml.safe_load` to consume."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
